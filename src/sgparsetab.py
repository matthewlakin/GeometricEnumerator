########################################################################
#
# sgparsetab.py
#
########################################################################
# 
# GeometricEnumerator
# Copyright (C) 2023 Sarika Kumar & Matthew Lakin
# 
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>. 
# 
########################################################################

# sgparsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programALPHANUMERIC ASTERISK ATSIGN CARET CONCENTRATION CONSTANT DEF DIFF DIRECTIVE DIV DOMAIN DOUBLECOLON DURATION EQUALS EXCLAMATIONMARK FALSE FLOAT FLOAT_OF_INT INT INT_OF_FLOAT LANGLE LBRACE LBRACKET LEAK LEFTCOMMENT LENGTHS LPAREN MIGRATE NEW PLOT POINTS RANGLE RBRACE RBRACKET RIGHTCOMMENT RPAREN SAMPLE SCALE SEMICOLON SINGLECOLON SPECIALLEFTCOMMENT SPECIALRIGHTCOMMENT SUB SUM TAU TIME TOEHOLDS TOLERANCE TRUE UNDERSCORE VERTICALBARbasedomain : ALPHANUMERICbasedomain : ALPHANUMERIC CARETdomain : basedomaindomain : basedomain ASTERISKdomain : basedomain EXCLAMATIONMARK ALPHANUMERICdomain : basedomain ASTERISK EXCLAMATIONMARK ALPHANUMERICnonemptydomainlist : domainnonemptydomainlist : domain nonemptydomainliststrand : LANGLE nonemptydomainlist RANGLEparallelstrand : strandparallelstrand : strand VERTICALBAR parallelstrandprocess : strandprocess : LPAREN parallelstrand RPARENprogram : process'
    
_lr_action_items = {'LPAREN':([0,],[4,]),'LANGLE':([0,4,13,],[5,5,5,]),'$end':([1,2,3,12,14,],[0,-14,-12,-13,-9,]),'ALPHANUMERIC':([5,9,10,11,16,17,18,20,21,22,],[11,11,-3,-1,-4,21,-2,22,-5,-6,]),'RPAREN':([6,7,14,19,],[12,-10,-9,-11,]),'VERTICALBAR':([7,14,],[13,-9,]),'RANGLE':([8,9,10,11,15,16,18,21,22,],[14,-7,-3,-1,-8,-4,-2,-5,-6,]),'ASTERISK':([10,11,18,],[16,-1,-2,]),'EXCLAMATIONMARK':([10,11,16,18,],[17,-1,20,-2,]),'CARET':([11,],[18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'process':([0,],[2,]),'strand':([0,4,13,],[3,7,7,]),'parallelstrand':([4,13,],[6,19,]),'nonemptydomainlist':([5,9,],[8,15,]),'domain':([5,9,],[9,9,]),'basedomain':([5,9,],[10,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('basedomain -> ALPHANUMERIC','basedomain',1,'p_basedomain_long','sgparser.py',21),
  ('basedomain -> ALPHANUMERIC CARET','basedomain',2,'p_basedomain_toehold','sgparser.py',25),
  ('domain -> basedomain','domain',1,'p_domain_uncomplemented_unbound','sgparser.py',29),
  ('domain -> basedomain ASTERISK','domain',2,'p_domain_complemented_unbound','sgparser.py',33),
  ('domain -> basedomain EXCLAMATIONMARK ALPHANUMERIC','domain',3,'p_domain_uncomplemented_bound','sgparser.py',37),
  ('domain -> basedomain ASTERISK EXCLAMATIONMARK ALPHANUMERIC','domain',4,'p_domain_complemented_bound','sgparser.py',41),
  ('nonemptydomainlist -> domain','nonemptydomainlist',1,'p_nonemptydomainlist_singleton','sgparser.py',45),
  ('nonemptydomainlist -> domain nonemptydomainlist','nonemptydomainlist',2,'p_nonemptydomainlist_cons','sgparser.py',49),
  ('strand -> LANGLE nonemptydomainlist RANGLE','strand',3,'p_strand','sgparser.py',53),
  ('parallelstrand -> strand','parallelstrand',1,'p_parallelstrand_singleton','sgparser.py',57),
  ('parallelstrand -> strand VERTICALBAR parallelstrand','parallelstrand',3,'p_parallelstrand_composition','sgparser.py',61),
  ('process -> strand','process',1,'p_process_singleton','sgparser.py',65),
  ('process -> LPAREN parallelstrand RPAREN','process',3,'p_process_composition','sgparser.py',69),
  ('program -> process','program',1,'p_program','sgparser.py',73),
]
